import { useState, useEffect, useContext } from "react";
import { NameObj } from "../../../api/apiTypes";
import { FilterArrayItem, DiscoverContext } from "../../pages/Discover/DiscoverPage";

type FilterButtonArrayProps = {
  items: NameObj[];
  itemsType: string;
}

const FilterButtonArray = ({ items, itemsType }: FilterButtonArrayProps) => {

  const { filterList, filterArray, setFilterArray} = useContext(DiscoverContext);

  const [exactChecked, setExactChecked] = useState(false);

  // set filterArray based on filterList generated by GameResults component using the search params
  // ensures that associated buttons are disabled if url has search params
  useEffect((() => {
    
    const loadFilterArray: FilterArrayItem[] = [];
    if (filterList) {
      if (filterList.where) {
        const filters = filterList.where;
        for (const key in filters) {
          const values = filters[key].values;
          const exact = filters[key].exact;
  
          const intValues = Array.isArray(values) ? values.map(value => Number(value)) : [Number(values)];
          const FilterArrayItem = {key: key, values:intValues, ...(exact ? {exact: true} : {})}
  
          loadFilterArray.push(FilterArrayItem);
        }
      }
    }

    setFilterArray(loadFilterArray);

  }), [filterList, setFilterArray])
  
  // update filter item's 'exact' status based on if the checkbox is ticked or not
  useEffect((() => {
    setFilterArray((prevFilterArray) => {
      const newFilterArray = [...prevFilterArray];
      const objIndex = newFilterArray.findIndex(item => item.key === itemsType);
      
      if (objIndex !== -1) {
        
        if (exactChecked) {
          newFilterArray[objIndex].exact = true;
        } else if (newFilterArray[objIndex].exact) {
          delete newFilterArray[objIndex].exact;
        }
      }

      return newFilterArray;
    })
  }), [exactChecked, itemsType, setFilterArray])

  // disables button if it is included in the filterArray
  const checkButtonDisabled = (id: number) => {
    const objIndex = filterArray.findIndex(item => item.key === itemsType);

    if (objIndex !== -1) {
      const values = filterArray[objIndex].values;
      return values.includes(id);
    }
  }

  // pushes clicked button filter's value to respective filterArray object
  const addToFilterArray = (value: number) => {
    setFilterArray((prevFilterArray) => {

      const newFilterArray = [...prevFilterArray];
      const objIndex = newFilterArray.findIndex(item => item.key === itemsType);

      if (objIndex !== -1) {
        if (!newFilterArray[objIndex].values.includes(value)) {
          newFilterArray[objIndex].values.push(value);

          if (exactChecked) newFilterArray[objIndex].exact = true;
        }
      } else {
        newFilterArray.push({
          key: itemsType,
          values: [value],
          ...(exactChecked ? {exact: true} : {}),
        });
      }

      return newFilterArray;
    })
  }
  
  return (
    <div>
      <ul>
        {
          items.map((item) => {
            return <li key={item.id}><button onClick={() => addToFilterArray(item.id)} disabled={checkButtonDisabled(item.id)}>{item.name}</button></li>
          })
        }
      </ul>
      <div>      
        <label htmlFor="exact">Exact Match:</label>
        <input 
          type="checkbox" 
          id="exact" 
          name="exact" 
          checked={exactChecked} 
          onChange={() => setExactChecked((current) => !current)}
        />
      </div>
    </div>
  )
}

export default FilterButtonArray;